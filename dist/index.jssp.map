{"version":3,"file":"index.jssp","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\r\n\r\nmetadata = {\r\n    \"systemName\": \"WorkflowRESTTest\",\r\n    \"displayName\": \"Workflow REST API Test\",\r\n    \"description\": \"Broker to call workflow REST API on local box\",\r\n    \"configuration\": {\r\n        \"ServiceURL\": {\r\n            displayName: \"Workflow REST API URL\",\r\n            type: \"string\",\r\n            value: \"https://talley1.onk2stable.com/Api/Workflow/V1/workflows/\"\r\n        }\r\n    }\r\n};\r\n\r\nondescribe = async function ({configuration}): Promise<void> {\r\n    postSchema({\r\n        objects: {\r\n            \"workflows\": {\r\n                displayName: \"Workflows\",\r\n                description: \"Manage Workflows\",\r\n                properties: {\r\n                    \"id\": {\r\n                        displayName: \"ID\",\r\n                        type: \"number\"\r\n                    },\r\n                    \"folio\": {\r\n                        displayName: \"Folio\",\r\n                        type: \"string\"\r\n                    }\r\n                },\r\n                methods: {\r\n                    \"start\": {\r\n                        displayName: \"Start a workflow\",\r\n                        type: \"create\",\r\n                        inputs: [\"folio\"],\r\n                        requiredInputs: [\"folio\"],\r\n                        outputs: [\"id\"]\r\n                    }\r\n            }\r\n        }\r\n        }})\r\n};\r\n\r\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\r\n    switch (objectName) {\r\n        case \"workflows\": await onexecuteWorkflows(methodName, parameters, properties, configuration); break;\r\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n    }\r\n}\r\n\r\nasync function onexecuteWorkflows(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    switch (methodName) {\r\n        case \"start\": await onexecuteStartWorkflow(parameters, properties, configuration); break;\r\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n    }\r\n}\r\n\r\n\r\nfunction onexecuteStartWorkflow(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        var urlValue = configuration[\"ServiceURL\"] + '7';\r\n        var data = JSON.stringify({\r\n            \"folio\": properties[\"folio\"]\r\n        });\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onreadystatechange = function () {\r\n            try {\r\n                if (xhr.readyState !== 4) return;\r\n                // look for 'created' code\r\n                if (xhr.status !== 201 && xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.responseText);\r\n\r\n                var obj = JSON.parse(xhr.responseText);\r\n                postResult({\r\n                    \"id\": obj.id\r\n                });\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }\r\n\r\n        //xhr.withCredentials = true;\r\n        xhr.open(\"POST\", urlValue);\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n        xhr.setRequestHeader(\"Authorization\", \"Basic YWRtaW5AbTM2NXgyNTIzOTEub25taWNyb3NvZnQuY29tOjEzdTlHMDZNaFk=\");\r\n        xhr.send(data);\r\n    });\r\n}"],"names":["metadata","displayName","type","value","ondescribe","async","configuration","postSchema","objects","description","properties","methods","inputs","requiredInputs","outputs","onexecute","objectName","methodName","parameters","Promise","resolve","reject","urlValue","data","JSON","stringify","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","responseText","obj","parse","postResult","id","e","open","setRequestHeader","send","onexecuteStartWorkflow","onexecuteWorkflows"],"mappings":"AAEAA,SAAW,YACO,+BACC,qCACA,8DACE,YACC,CACVC,YAAa,wBACbC,KAAM,SACNC,MAAO,+DAKnBC,WAAaC,gBAAgBC,cAACA,IAC1BC,WAAW,CACPC,QAAS,WACQ,CACTP,YAAa,YACbQ,YAAa,mBACbC,WAAY,IACF,CACFT,YAAa,KACbC,KAAM,gBAED,CACLD,YAAa,QACbC,KAAM,WAGdS,QAAS,OACI,CACLV,YAAa,mBACbC,KAAM,SACNU,OAAQ,CAAC,SACTC,eAAgB,CAAC,SACjBC,QAAS,CAAC,aAOlCC,UAAYV,gBAAgBW,WAACA,EAADC,WAAaA,EAAbC,WAAyBA,EAAzBR,WAAqCA,EAArCJ,cAAiDA,WACjEU,OACC,kBAKbX,eAAkCY,EAAoBC,EAA0BR,EAA0BJ,UAC9FW,OACC,cAMb,SAAgCC,EAA0BR,EAA0BJ,UACzE,IAAIa,QAAc,CAACC,EAASC,SAC3BC,EAAWhB,EAAa,WAAiB,IACzCiB,EAAOC,KAAKC,UAAU,OACbf,EAAU,QAGnBgB,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,kBAEM,IAAnBF,EAAIG,WAAkB,UAEP,MAAfH,EAAII,QAAiC,MAAfJ,EAAII,OAAgB,MAAM,IAAIC,MAAM,sBAAwBL,EAAIM,kBAEtFC,EAAMT,KAAKU,MAAMR,EAAIM,cACzBG,WAAW,IACDF,EAAIG,KAEdhB,IACF,MAAOiB,GACLhB,EAAOgB,KAKfX,EAAIY,KAAK,OAAQhB,GACjBI,EAAIa,iBAAiB,eAAgB,oBACrCb,EAAIa,iBAAiB,SAAU,oBAC/Bb,EAAIa,iBAAiB,gBAAiB,sEACtCb,EAAIc,KAAKjB,KAnCWkB,CAAuBvB,EAAYR,EAAYJ,uBACpD,IAAIyB,MAAM,cAAgBd,EAAa,uBAR9ByB,CAAmBzB,EAAYC,EAAYR,EAAYJ,uBAChE,IAAIyB,MAAM,cAAgBf,EAAa"}